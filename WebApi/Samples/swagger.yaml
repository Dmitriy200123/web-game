openapi: 3.0.1
info:
  title: Web Game API
  version: '0.1'
paths:
  '/api/games/{gameId}':
    get:
      tags:
        - Games
      summary: Получить игру
      operationId: GetGameById
      parameters:
        - name: gameId
          in: path
          description: Идентификатор игры
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/GameDto'
        '404':
          description: Игра не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
  /api/games:
    post:
      tags:
        - Games
      summary: Создать игру
      operationId: CreateGame
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameToCreateDto'
      responses:
        '201':
          description: Игра создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Некорректные входные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
        '422':
          description: Ошибка при проверке
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
  '/api/games/{gameId}/players/{userId}':
    put:
      tags:
        - Games
      summary: Добавить игрока в игру
      description: "Имя игрока в каждой игре может быть уникальным, поэтому его надо передать.\r\nВ случае нескольких запросов для одного пользователя, должно быть установлено имя из последнего запроса."
      operationId: AddPlayerToGame
      parameters:
        - name: gameId
          in: path
          description: Идентификатор игры
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          description: Идентификатор пользователя
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Пользователь добавлен в качестве игрока
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Некорректные входные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
        '404':
          description: Игра или пользователь не найдены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
    get:
      tags:
        - Games
      summary: Получить игрока в игре
      operationId: GetPlayerOfGame
      parameters:
        - name: gameId
          in: path
          description: Идентификатор игры
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          description: Идентификатор пользователя
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/PlayerDto'
        '404':
          description: Игра или игрок не найдены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
  '/api/games/{gameId}/status':
    get:
      tags:
        - Games
      summary: Получить статус игры
      operationId: GetGameStatusById
      parameters:
        - name: gameId
          in: path
          description: Идентификатор игры
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                enum:
                  - WaitingToStart
                  - Playing
                  - Finished
                  - Canceled
                type: string
            application/xml:
              schema:
                enum:
                  - WaitingToStart
                  - Playing
                  - Finished
                  - Canceled
                type: string
        '404':
          description: Игра не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
  '/api/games/{gameId}/players/{userId}/decision':
    post:
      tags:
        - Games
      summary: Задать решение игрока
      operationId: SetPlayerDecision
      parameters:
        - name: gameId
          in: path
          description: Идентификатор игры
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          description: Идентификатор пользователя
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              enum:
                - None
                - Rock
                - Scissors
                - Paper
              type: string
      responses:
        '200':
          description: ''
        '204':
          description: Решение задано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Некорректные входные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
        '404':
          description: Игра или пользователь не найдены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
  '/api/users/{userId}':
    get:
      tags:
        - Users
      summary: Получить пользователя
      operationId: GetUserById
      parameters:
        - name: userId
          in: path
          description: Идентификатор пользователя
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
    head:
      tags:
        - Users
      summary: Получить пользователя
      operationId: GetUserById
      parameters:
        - name: userId
          in: path
          description: Идентификатор пользователя
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
    delete:
      tags:
        - Users
      summary: Удалить пользователя
      operationId: DeleteUser
      parameters:
        - name: userId
          in: path
          description: Идентификатор пользователя
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Пользователь удален
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
    put:
      tags:
        - Users
      summary: Обновить пользователя
      operationId: UpdateUser
      parameters:
        - name: userId
          in: path
          description: Идентификатор пользователя
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserToUpdateDto'
      responses:
        '201':
          description: Пользователь создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
        '204':
          description: Пользователь обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Некорректные входные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
        '422':
          description: Ошибка при проверке
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
    patch:
      tags:
        - Users
      summary: Частично обновить пользователя
      operationId: PartiallyUpdateUser
      parameters:
        - name: userId
          in: path
          description: Идентификатор пользователя
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              uniqueItems: false
              type: array
              items:
                $ref: '#/components/schemas/Operation'
      responses:
        '204':
          description: Пользователь обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Некорректные входные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
        '422':
          description: Ошибка при проверке
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
  /api/users:
    post:
      tags:
        - Users
      summary: Создать пользователя
      description: "Пример запроса:\r\n            \r\n    POST /api/users\r\n    {\r\n       \"login\": \"johndoe375\",\r\n       \"firstName\": \"John\",\r\n       \"lastName\": \"Doe\"\r\n    }"
      operationId: CreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserToCreateDto'
      responses:
        '201':
          description: Пользователь создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Некорректные входные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
        '422':
          description: Ошибка при проверке
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
    get:
      tags:
        - Users
      summary: Получить пользователей
      operationId: GetUsers
      parameters:
        - name: pageNumber
          in: query
          description: 'Номер страницы, по умолчанию 1'
          schema:
            type: integer
            format: int32
            default: 1
        - name: pageSize
          in: query
          description: 'Размер страницы, по умолчанию 20'
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                uniqueItems: false
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
            application/xml:
              schema:
                uniqueItems: false
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
    options:
      tags:
        - Users
      summary: Опции по запросам о пользователях
      operationId: GetUsersOptions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
            application/xml:
              schema:
                $ref: '#/components/schemas/Void'
components:
  schemas:
    GameDto:
      type: object
      properties:
        id:
          type: string
        players:
          uniqueItems: false
          type: array
          items:
            $ref: '#/components/schemas/PlayerDto'
        turnsCount:
          type: integer
          format: int32
        currentTurnIndex:
          type: integer
          format: int32
        status:
          enum:
            - WaitingToStart
            - Playing
            - Finished
            - Canceled
          type: string
    PlayerDto:
      type: object
      properties:
        userId:
          type: string
        name:
          type: string
        decision:
          enum:
            - None
            - Rock
            - Scissors
            - Paper
          type: string
        score:
          type: integer
          format: int32
    Void:
      type: object
    GameToCreateDto:
      required:
        - turnsCount
      type: object
      properties:
        turnsCount:
          type: integer
          format: int32
    UserDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        login:
          type: string
        fullName:
          type: string
        gamesPlayed:
          type: integer
          format: int32
        currentGameId:
          type: string
          format: uuid
    UserToUpdateDto:
      required:
        - firstName
        - lastName
        - login
      type: object
      properties:
        login:
          type: string
        firstName:
          type: string
        lastName:
          type: string
    Operation:
      type: object
      properties:
        value:
          type: object
        path:
          type: string
        op:
          type: string
        from:
          type: string
    UserToCreateDto:
      required:
        - login
      type: object
      properties:
        login:
          type: string
        firstName:
          type: string
          default: John
        lastName:
          type: string
          default: Doe
